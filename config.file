УСТАНОВКА LAMP
APACHE
sudo apt-get update
sudo apt-get install apache2
чтобы не было ошибки при проверке конфигурации Apache
sudo apache2ctl configtest
(https://www.digitalocean.com/community/tutorials/linux-apache-mysql-php-lamp-ubuntu-16-04-ru)
Чтобы узнать IP сервера
sudo apt-get install curl
curl http://icanhazip.com
188.163.101.100

Добавить
sudo nano /etc/apache2/apache2.conf
ServerName домен_или_IP_адрес_сервера

Перезапуск
 sudo systemctl restart apache2
Проверить статус
sudo systemctl status apache2

sudo ufw app list

Проверка работает ли apache
sudo apache2ctl configtest
Проверим настройку профиля Apache Full, она должна разрешать трафик для портов 80 и 443:
sudo ufw app info "Apache Full"
Разрешим входящий трафик для этого профиля:
sudo ufw allow in "Apache Full"

MYSQL
sudo apt-get install mysql-server
sudo apt-get install mysql-server

PHP
sudo apt-get install php libapache2-mod-php php-mcrypt php-mysql

NODEJS
sudo apt install nodejs
NPM
sudo apt install npm

Установка HOMESTEAD
sudo apt install virtualbox
sudo apt install vagrant
sudo apt install git
git clone https://github.com/laravel/homestead.git Homestead

Настройка Homestead.yaml
Прописать хост в etc/hosts
Перейти в homestead
Запуск виртуальной машины
vagrant up
vagrant ssh

Далее composer install в папке проекта в vagrant
Далее на локалке меняем файл env - DB
Далее в vagrant 
php artisan cache:clear
php artisan migrate
php artisan key:generate

vagrant global-status
перезапуск
vagrant resume
После добавление проекта перезапустить бокс
vagrant reload --provision

Показывает работает ли домен
ping laravel-blog

В VirtualBox установила этот пакет...
apt-get install ifupdown


sudo apt install dbeaver mc - командер

тунель
https://habr.com/post/331348/
ssh -L 9999:localhost:5432 host2

dbeaver
sudo add-apt-repository ppa:serge-rider/dbeaver-ce
sudo apt-get update
sudo apt-get install dbeaver-ce

ssh root@dev.webparadox.com
/var/www/dev.domains/pharma


Laravel
php artisan cache:clear
php artisan migrate
php artisan key:generate

php artisan db:seed

Устанавливаем npm module в проект
npm install
Пересобирает данные
npm run watch-poll

Запуск Yarn
yarn

Установка графиков (сначала js потом vue)
yarn add chart.js

Убивает процессы
killall -9 node


Realtime app

sudo apt install redis-server
проверка - redis-cli (ping) exit
Посмотреть приходят ли сообщения
redis-cli monitor
В ларе в проекте
composer install predis/predis
в .env - BROADCAST_DRIVER=redis
проверка
netstat -an | grep 6379


yarn add ioredis
yarn add socket.io
аналог npm:
npm i express
npm i ioredis
npm i socket.io

Js клиент для Redis сервера 
yarn add ioredis

Библиотека для вебсокета для обмена данными в реальном времени
yarn add socket.io

sudo npm install --save nodemon -g
nodemon server.js


запустить редис
sudo systemctl status redis


остановить апатч
systemctl stop apache2
sudo systemctl stop nginx

статус апатча
sudo systemctl status apache2



!!!Laravel ECHO SERVER!!!

//установить нужно его глобально
sudo npm install -g laravel-echo-server

//Настройка конфигурационного файла
laravel-echo-server init

//Запуск
laravel-echo-server start

//Нужно установить 2 js библиотеки
npm install --save laravel-echo socket.io-client

//запустить сервер
laravel-echo-server start
//запустить очереди, уоторые будут выполнять доставку сообщений пользователю
php artisan queue:work



!!! Tinker !!!

php artisan tinker
$user = App\User::find(1)
App\Room::create(['name' => 'Первая комната',])

КЛАССНАЯ ФУНКЦИЯ
contains() - Ларавель ищет в коллекции
(int) $user->rooms->contains($room_id)



!!!Docker!!!

Образы - Реестры - Контейнеры
IMAGES (just read) - для создания контейнеров
REGISTER(public/privat) - где расположены образы
hub.docker.com - публичный реестр
CONTAINERS - как директории, в них содержится все, что нужно для работы приложения
каждый контейнер создается из образа


Docker Ubunta Install

Docker:
https://docs.docker.com/install/
Docker-Compose:
https://docs.docker.com/compose/install/

Добавить пользователя в группу, чтобы постоянно не запускать от sudo
sudo usermod -aG docker katnezabydka

Запуск docker
docker-compose up

docker --version
Docker version 18.03, build c97c6d6

$ docker-compose --version
docker-compose version 1.22.0, build 8dd22a9

$ docker-machine --version
docker-machine version 0.14.0, build 9ba6da9

Проверка работы доккера - запуск простого образа
docker run hello-world
Запуск веб-сервера
docker run -d -p 80:80 --name webserver nginx

Просмотр сведенья о контейнере
docker container ls
docker ps -a
Запустить доккер снова
docker ps

перезапуск контейнера
docker start

## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq';

service docker restart
-it - создает сеанс интерактивной работы на подключаемом устройстве
bash - инициализирует командную оболочку bash
docker run -it ubuntu bash
Инициализируем новый контейнер но задаем для него имя хоста (-h)
docker run -h dockerloc -it ubuntu bash
Инфо о контейнере
docker inspect name_conteiner
docker inspect jolly_chatterjee | grep IPAddress

Удалить контейнер docker -rm name_conteiner

/-------------------------------------------------------/
/-------------------------------------------------------/
//Список образов
docker images
//Список контайнеров
docker ps -a
//Проверка работает ли контейнер
docker ps


//Удалить все установленные контейнеры
docker rm -v $(docker ps -aq -f status=exited)

//Удалить все образы с локалки
docker rmi $(docker images -a -q) --force
// Остановить запущенные контейнеры
docker stop

//Удалить контейнер с доккера
docker-compose rm db

Останавливаем все контейнеры в docker и docker-compose
Потом удаляем все контейнеры
Потом удаляем все образы

/-------------------------------------------------------/
/-------------------------------------------------------/

!!! СОЗДАНИЕ КОНТЕЙНЕРА !!!

//Имя контейнера имя хоста - мы внутри
docker run -it --name myapp --hostname myapp ubuntu bash
//обновляем индексы
apt update
//ставим пакет
apt install cowsay
//cоздаем символьную ссылку чтобы при запуске не писать
ln -s /usr/games/cowsay /usr/bin/cowsay

//чтобы запустить (/usr/games/cowsay - весь путь не пишем т.к.создали ссылку)
cowsay "TEST"

!!! КОНТЕЙНЕР В ОБРАЗ !!!

//имя контейнера, имя пользователя docker hub/имя отображаемого образа
docker commit myapp katnezabydka/myapp
// вернет id sha256:df06415a68f3ece82570cfc2f8ba63dc833a566f6fcf4bb9fa8d284c3dc1fb7d

// Запустить образ
docker run katnezabydka/myapp cowsay "Hi"

// Запушить наш образ на docker hub
//docker login - залогиниться перед пушем
docker push katnezabydka/myapp

/-------------------------------------------------------/
1) Получение образа
// -t имя образа
docker build -t katnezabydka/app .

2) Запуск, без указания команды
docker run katnezabydka/app "TEST"

/-------------------------------------------------------/
!!! Соединение 2х контейнеров mariadb and adminer !!!

// -d - запуск в фоновом режиме
docker run --name mysqlserver -e MYSQL_ROOT_PASSWORD=123456 -d mariadb

// --link mysqlserver:db - соединение
//docker run показыает что нужно установить соединение между mysqlserver и adminer
//8080:8080 - порт на локалке и внутри контейнера
docker run --link mysqlserver:db -p 8080:8080 adminer

/-------------------------------------------------------/
!!! Docker compose!!!
/-------------------------------------------------------/
//запуск
docker-compose up
//запуск в фоновом режиме
docker-compose up -d

//получение ip address docker-machine
docker-machine ip default

//Перестройка проекта
docker-compose build


/-------------------------------------------------------/
!!! Тома Доккера!!!
/-------------------------------------------------------/
//можно создать сразу том data

docker run -v/data ubuntu

//volumes - тома
docker-compose up
docker-compose build
Билдится в файл на компе, что указан в volumes, физически бд может быть там


//посмотреть историю образа
docker history image_name

//если после распаковки сразу удалить пакеты в той же команде в Dockerfile то места образ будет занимать меньше
run .../ && rm -rf /var/lib/apt/lists/*

/-------------------------------------------------------/
!!! Laravel in Docker !!!
/-------------------------------------------------------/

docker-compose up --build
//Для входа в контейнер web - имя сервиса bash - оболочка
docker-compose exec web bash

//migration controller --resource
php artisan make:Category -mcr
//equal + factory
php artisan make:Category -a

